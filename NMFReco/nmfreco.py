# -*- coding: utf-8 -*-
"""nMFReco

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11sMPuVbbVqrUcMtk4wTZrbm8EvqHY9gb
"""

#!pip install scikit-surprise
#!pip uninstall -y numpy
#!pip install numpy==1.24.4
#!pip install scikit-surprise

!wget https://files.grouplens.org/datasets/movielens/ml-1m.zip
!unzip ml-1m.zip

from surprise import Dataset, Reader, NMF, accuracy
import pandas as pd

#veri ölçeğini tanımlarız
reader = Reader(rating_scale=(1, 5))

# ratings verisi
ratings = pd.read_csv("ml-1m/ratings.dat", sep="::", engine='python', names=["UserID", "MovieID", "Rating", "Timestamp"])

# movies verisi
movies = pd.read_csv("ml-1m/movies.dat", sep="::", engine='python', names=["MovieID", "Title", "Genres"], encoding='latin-1')

# users verisi
users = pd.read_csv("ml-1m/users.dat", sep="::", engine='python', names=["UserID", "Gender", "Age", "Occupation", "Zip-code"], encoding='latin-1')

ratings.head()

from surprise.model_selection import train_test_split
# veri filtreleme
# Her kullanıcının kaç yorum yaptığını say
user_counts = ratings['UserID'].value_counts()

# Yalnızca 5 ve daha fazla yorum yapan kullanıcıları al
filtered_users = user_counts[user_counts >= 5].index

# Bu kullanıcıları ratings veri setinde filtrele
ratings_filtered = ratings[ratings['UserID'].isin(filtered_users)]



data_filtered = Dataset.load_from_df(ratings_filtered[['UserID', 'MovieID', 'Rating']], reader)

# Yalnızca 5 ve daha fazla yorum yapan kullanıcıları al
filtered_users = user_counts[user_counts >= 5].index


trainset, testset = train_test_split(data_filtered, test_size=0.1)

from sklearn.decomposition import NMF
import numpy as np
import pandas as pd

# kullanıcı-ürün matrisi
ratings_matrix = pd.pivot_table(
    ratings_filtered,
    index='UserID',
    columns='MovieID',
    values='Rating'
)
ratings_matrix.fillna(0, inplace=True)  # eksik değerleri sıfırla (isteğe göre değişebilir)

nmf_model = NMF(n_components=10, init='random', random_state=42)
user_features = nmf_model.fit_transform(ratings_matrix)  # kullanıcı x özellik
item_features = nmf_model.components_                   # özellik x item

predicted_ratings = np.dot(user_features, item_features)
predicted_df = pd.DataFrame(predicted_ratings, index=ratings_matrix.index, columns=ratings_matrix.columns)

user_id = 5
user_ratings = ratings_matrix.loc[user_id]
user_predictions = predicted_df.loc[user_id]

# Kullanıcının zaten etkileşimde bulunmadığı ürünleri seç
unwatched_items = user_ratings[user_ratings == 0].index
recommendations = user_predictions[unwatched_items].sort_values(ascending=False).head(5)

from sklearn.metrics import mean_squared_error

# 1. Gerçek puanları sakla
original = ratings_matrix.copy()

# 2. Bazı kullanıcıların bazı puanlarını test için ayır
test_indices = original.sample(frac=0.2, random_state=42).stack().index
train_matrix = original.copy()
for user, item in test_indices:
    train_matrix.loc[user, item] = 0  # maskeleme

# 3. Modeli bu eksik verili matrisle eğit
nmf_model = NMF(n_components=10, init='random', random_state=42)
user_features = nmf_model.fit_transform(train_matrix)
item_features = nmf_model.components_
predicted = np.dot(user_features, item_features)

# 4. Gerçek vs Tahmin karşılaştır
y_true = [original.loc[u, i] for u, i in test_indices]
y_pred = [predicted[train_matrix.index.get_loc(u), train_matrix.columns.get_loc(i)] for u, i in test_indices]

rmse = np.sqrt(mean_squared_error(y_true, y_pred))
print(f"RMSE: {rmse:.4f}")

# Eğitim verisi (sıfırları içeren) için tahmin:
train_pred = np.dot(user_features, item_features)
train_indices = train_matrix.stack().index  # sıfır olmayanlar

y_train_true = [original.loc[u, i] for u, i in train_indices]
y_train_pred = [train_pred[train_matrix.index.get_loc(u), train_matrix.columns.get_loc(i)] for u, i in train_indices]

train_rmse = np.sqrt(mean_squared_error(y_train_true, y_train_pred))
print(f"Train RMSE: {train_rmse:.4f}")